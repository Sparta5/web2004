import _extends from "@babel/runtime/helpers/esm/extends";
// Utils
import { createNamespace } from '../utils'; // import { preventDefault } from '../utils/dom/event';
// Mixins
// Components

import Popup from '../popup';
import Icon from '../icon';
import Field from '../field';
import Button from '../button';

var _createNamespace = createNamespace('pulldown-sort'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  mixins: [],
  props: {
    value: {
      type: Boolean,
      default: false,
      required: true
    },
    data: {
      type: [Object, Array],
      required: true
    },
    type: {
      type: String,
      default: 'overall'
    },
    checked: {
      type: [String, Number, Object]
    },
    priceSuffix: {
      type: String,
      default: '万'
    }
  },
  data: function data() {
    return {
      show: false,
      active: {},
      priceRange: []
    };
  },
  computed: {},
  watch: {
    value: function value(val) {
      if (this.show === val) return;
      this.show = val;

      if (typeof this.checked !== 'object') {
        this.$set(this.active, 0, this.checked);
        return;
      }

      this.active = this.checked;
    },
    checked: {
      handler: function handler(val) {
        if (typeof val !== 'object') {
          this.$set(this.active, 0, val);
          return;
        }

        this.active = val;
      },
      immediate: true
    }
  },
  mounted: function mounted() {},
  methods: {
    togglePopup: function togglePopup(val) {
      this.$emit('input', val);
    },
    selectHandler: function selectHandler(key, index) {
      index = index || 0;
      this.$set(this.active, index, key);
      this.show = false;
      this.$emit('confirm', {
        key: key
      });
    },
    selectCategoryHandler: function selectCategoryHandler(key, index) {
      var _this = this;

      if (index != null) {
        this.$set(this.active, index, key);
        this.priceRange = [];
        return;
      }

      Object.keys(this.active).forEach(function (activeKey) {
        _this.$set(_this.active, activeKey, key);
      });
      this.priceRange = [];
    },
    priceConfirm: function priceConfirm() {
      if (this.active[0]) {
        var i = 0;

        while (i < this.data.length) {
          var item = this.data[i] || {};

          if (item.key === this.active[0]) {
            var key = item.key,
                name = item.name,
                range = item.range;
            this.$emit('confirm', {
              key: key,
              name: name,
              range: range
            });
            this.show = false;
            return;
          }

          ++i;
        }
      }

      this.$emit('confirm', {
        range: this.priceRange.slice(0, 2)
      });
    },
    categoryConfirm: function categoryConfirm() {
      var i = 0;
      var selecedArray = [];

      while (i < this.data.length) {
        var item = this.data[i] || {};
        var key = item.key,
            name = item.name,
            _item$children = item.children,
            children = _item$children === void 0 ? [] : _item$children;
        var subIndex = 0;

        while (subIndex < children.length) {
          var child = children[subIndex];

          if (child.key === this.active[i]) {
            selecedArray.push({
              key: key,
              name: name,
              children: {
                key: child.key,
                name: child.name
              }
            });
            break;
          }

          ++subIndex;
        }

        ++i;
      }

      this.$emit('confirm', selecedArray);
      this.show = false;
    },
    genOverall: function genOverall() {
      var _this2 = this;

      var h = this.$createElement;
      if (!Array.isArray(this.data)) return;
      if (typeof this.checked === 'object' || this.checked == null) return;
      return this.data.map(function (item) {
        var isActive = _this2.active[0] === item.key;
        return h("div", {
          "class": isActive ? bem('overall_item') + ' active' : bem('overall_item'),
          "key": item.key,
          "attrs": {
            "data": item.key
          },
          "on": {
            "click": function click() {
              _this2.selectHandler(item.key);
            }
          }
        }, [h("span", [item.name]), h(Icon, {
          "attrs": {
            "class-prefix": "sp-iconfont",
            "name": "check",
            "color": "#4974F5"
          },
          "class": "active-icon"
        })]);
      });
    },
    // 价格输入框
    genPriceInput: function genPriceInput() {
      var _this3 = this;

      var h = this.$createElement;
      return h("div", {
        "class": "price-range"
      }, [h(Field, {
        "attrs": {
          "type": "number",
          "placeholder": "请输入最低价"
        },
        "scopedSlots": {
          button: function button() {
            if (_this3.priceSuffix) return h("span", [_this3.priceSuffix]);
          }
        },
        "on": {
          "focus": function focus() {
            _this3.$set(_this3.active, 0, null);
          }
        },
        "model": {
          value: _this3.priceRange[0],
          callback: function callback($$v) {
            _this3.$set(_this3.priceRange, 0, $$v);
          }
        }
      }), h("span", {
        "class": "connect-icon"
      }, ["-"]), h(Field, {
        "attrs": {
          "type": "number",
          "placeholder": "请输入最高价"
        },
        "scopedSlots": {
          button: function button() {
            if (_this3.priceSuffix) return h("span", [_this3.priceSuffix]);
          }
        },
        "model": {
          value: _this3.priceRange[1],
          callback: function callback($$v) {
            _this3.$set(_this3.priceRange, 1, $$v);
          }
        }
      })]);
    },
    // 价格区间
    genPrice: function genPrice() {
      var _this4 = this;

      var h = this.$createElement;
      if (this.data && !Array.isArray(this.data)) return;
      return h("div", {
        "class": bem('category')
      }, [h("div", {
        "class": bem('category_body')
      }, [h("div", {
        "class": bem('category_item')
      }, [h("h4", ["\u4EF7\u683C\u533A\u95F4"]), h("div", {
        "class": bem('category_item-content')
      }, [this.genPriceInput(), h("ul", [this.data.map(function (item) {
        var isActive = _this4.active[0] === item.key;
        return h("li", {
          "class": isActive ? 'active' : '',
          "on": {
            "click": function click() {
              _this4.selectCategoryHandler(item.key, 0);
            }
          }
        }, [item.name]);
      })])])])]), h("div", {
        "class": bem('category_footer')
      }, [h(Button, {
        "on": {
          "click": function click() {
            _this4.selectCategoryHandler();
          }
        }
      }, ["\u91CD\u7F6E"]), h(Button, {
        "attrs": {
          "type": "primary"
        },
        "on": {
          "click": this.priceConfirm
        }
      }, ["\u786E\u5B9A"])])]);
    },
    genCategoryItem: function genCategoryItem() {
      var _this5 = this;

      var h = this.$createElement;
      return this.data.map(function (item, index) {
        return h("div", {
          "class": bem('category_item')
        }, [h("h4", [item.name]), h("div", {
          "class": bem('category_item-content')
        }, [h("ul", [Array.isArray(item.children) && item.children.map(function (child) {
          var isActive = _this5.active[index] === child.key;
          return h("li", {
            "class": isActive ? 'active' : '',
            "on": {
              "click": function click() {
                _this5.selectCategoryHandler(child.key, index);
              }
            }
          }, [child.name]);
        })])])]);
      });
    },
    genCategory: function genCategory() {
      var _this6 = this;

      var h = this.$createElement;
      if (this.data && !Array.isArray(this.data)) return;
      return h("div", {
        "class": bem('category')
      }, [h("div", {
        "class": bem('category_body')
      }, [this.genCategoryItem()]), h("div", {
        "class": bem('category_footer')
      }, [h(Button, {
        "on": {
          "click": function click() {
            _this6.selectCategoryHandler();
          }
        }
      }, ["\u91CD\u7F6E"]), h(Button, {
        "attrs": {
          "type": "primary"
        },
        "on": {
          "click": this.categoryConfirm
        }
      }, ["\u786E\u5B9A"])])]);
    },
    genSort: function genSort() {
      var result = null;

      switch (this.type) {
        case 'overall':
          result = this.genOverall();
          break;

        case 'price':
          result = this.genPrice();
          break;

        case 'category':
          result = this.genCategory();
          break;

        default:
      }

      return result;
    }
  },
  render: function render() {
    var h = arguments[0];
    var show = this.show,
        $attrs = this.$attrs,
        $listeners = this.$listeners;
    return h(Popup, {
      "attrs": _extends({
        "value": show,
        "position": "top"
      }, $attrs),
      "class": bem(),
      "on": _extends({
        "input": this.togglePopup
      }, $listeners)
    }, [this.genSort()]);
  }
});