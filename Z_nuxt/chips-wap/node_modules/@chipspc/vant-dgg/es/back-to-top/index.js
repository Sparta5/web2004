// 引入常用工具
import { createNamespace } from '../utils'; // 按钮组件

import Icon from '../icon'; // 注入生成节点方法

var _createNamespace = createNamespace('back-to-top'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

export default createComponent({
  props: {
    // 图标传入类型
    iconPrefix: String,
    //返回顶部按钮的icon
    icon: {
      type: String,
      default: 'back-top'
    },
    //返回顶部按钮的文案
    text: String,
    // 是否固定布局
    fixed: {
      type: Boolean,
      default: true
    },
    // 层级
    zIndex: [Number, String],
    //是否超出隐藏
    ellipsis: {
      type: Boolean,
      default: false
    },
    //右边距
    right: {
      type: [Number, String],
      default: 50
    },
    //下边距
    bottom: {
      type: [Number, String],
      default: 50
    }
  },
  data: function data() {
    return {
      flag_scroll: false,
      scroll: 0,
      height: null
    };
  },
  computed: {
    transitionName: function transitionName() {
      var right = this.right;
    }
  },
  mounted: function mounted() {
    window.addEventListener('scroll', this.handleScroll, true);
  },
  methods: {
    /**
     *返回顶部事件，并抛出回调 on-back-top 事件
     *
     */
    backTop: function backTop() {
      document.body.scrollTop = 0;
      document.documentElement.scrollTop = 0;
      this.$emit('on-back-top');
    },
    //滑动超过200时显示按钮
    handleScroll: function handleScroll() {
      if (document.body.scrollTop > 200 || document.documentElement.scrollTop > 200) {
        this.flag_scroll = true;
      } else {
        this.flag_scroll = false;
      }
    }
  },

  /**
   *渲染方法
   *
   * @return {*}
   */
  render: function render() {
    var h = arguments[0];
    var zIndex = this.zIndex,
        right = this.right,
        bottom = this.bottom,
        fixed = this.fixed,
        backTop = this.backTop,
        flag_scroll = this.flag_scroll;
    var bottomType, rightType;

    if (typeof bottom === 'number') {
      bottomType = bottom + "px";
    } else {
      bottomType = bottom;
    }

    if (typeof right === 'number') {
      rightType = right + "px";
    } else {
      rightType = right;
    }

    return h("transition", {
      "attrs": {
        "name": "sp-slide-up"
      }
    }, [h("div", {
      "directives": [{
        name: "show",
        value: flag_scroll
      }],
      "ref": "topSp",
      "class": [bem({
        fixed: fixed
      })],
      "style": {
        right: rightType,
        zIndex: zIndex,
        bottom: bottomType
      },
      "on": {
        "click": backTop
      }
    }, [h("div", {
      "class": bem('icon')
    }, [h(Icon, {
      "attrs": {
        "name": this.icon,
        "classPrefix": this.iconPrefix
      }
    })]), h("div", {
      "class": bem('text')
    }, [this.text])])]);
  }
});