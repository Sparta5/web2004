import _extends from "@babel/runtime/helpers/esm/extends";
import { createNamespace } from '../utils';
import { ParentMixin } from '../mixins/relation';
import { BORDER_TOP, BORDER_LEFT } from '../utils/constant';
import { PopupMixin } from '../mixins/popup';
import Popup from '../popup';
import Button from '../button';
import Icon from '../icon';

var _createNamespace = createNamespace('center-popup'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1]; //弹框默认配置


var typeMap = {
  exit: {
    endText: '残忍离开',
    exchangeButtonText: '联系他',
    title: '确认要退出吗',
    marginTopTitle: '30px',
    marginTopDescription: '4px'
  },
  entrust: {
    exchangeButtonText: '免费委托',
    title: '金牌规划师帮您售卖网店',
    marginTopTitle: '16px',
    marginTopDescription: '20px'
  },
  release: {
    cancelButtonText: '狠心放弃',
    confirmButtonText: '继续编辑',
    title: '确定要放弃发布资源？',
    marginTopTitle: '30px'
  },
  functional: {
    cancelButtonText: '取消',
    confirmButtonText: '确定',
    marginTopTitle: '21px',
    marginTopDescription: '11px',
    paddingTitle: '0px 24px',
    paddingDescription: '0px 24px 22px 24px'
  },
  moreButton: {
    buttonDirection: 'column',
    cancelButtonText: '取消',
    marginTopTitle: '21px',
    marginTopDescription: '11px',
    paddingTitle: '0px 24px',
    paddingDescription: '0px 24px 22px 24px'
  }
};
export default createComponent({
  mixins: [ParentMixin('vanCenterPopup'), PopupMixin()],
  props: {
    getContainer: [String, Function],
    //弹框挂载容器
    beforeClose: Function,
    //关闭前方法
    callback: Function,
    //回调
    closeOnClickOverlay: {
      type: Boolean,
      default: true
    },
    //是否在点击遮罩层后关闭
    safeAreaInsetBottom: {
      type: Boolean,
      default: false
    },
    //是否开启底部安全区适配
    width: {
      type: String
    },
    //弹框宽度
    exchangeButtonLoading: {
      type: Boolean,
      default: false
    },
    //按钮loading开关
    exchangeButtonDisabled: Boolean,
    //是否禁用按钮
    buttonType: {
      type: String,
      default: 'button'
    },
    //按钮类型
    field: {
      type: Object,
      default: function _default() {
        return {};
      }
    },
    //弹框文字字段
    data: {
      type: Array,
      default: function _default() {
        return [];
      }
    } //弹框数据

  },
  data: function data() {
    return {
      showModal: this.value,
      //控制弹框开关
      loading: {
        confirm: false,
        cancel: false
      } //控制按钮loading

    };
  },
  computed: {
    exitField: function exitField() {
      return _extends({}, typeMap[this.field.type], this.field);
    },
    //设置说明style
    genDescriptionStyle: function genDescriptionStyle() {
      var style = {};
      var exitField = this.exitField;

      if (exitField.type === 'functional' && !exitField.title) {
        exitField.marginTopDescription = '22px';
      }

      if (exitField.marginTopDescription) {
        style.marginTop = exitField.marginTopDescription;
      }

      if (exitField.paddingDescription) {
        style.padding = exitField.paddingDescription;
      }

      return style;
    },
    //设置标题style
    genTitleStyle: function genTitleStyle() {
      var style = {};
      var exitField = this.exitField;

      if (exitField.type === 'functional') {
        if (!exitField.description) {
          exitField.marginTopTitle = '29px';
          exitField.marginBottomTitle = '29px';
          exitField.paddingTitle = '0 20px';
        }

        if (exitField.iconName) {
          exitField.marginTopTitle = '14px';
        }
      }

      if (exitField.marginTopTitle) {
        style.marginTop = exitField.marginTopTitle;
      }

      if (exitField.marginBottomTitle) {
        style.marginBottom = exitField.marginBottomTitle;
      }

      if (exitField.paddingTitle) {
        style.padding = exitField.paddingTitle;
      }

      return style;
    }
  },
  watch: {
    //监听弹层开启关闭
    value: function value(val) {
      this.showModal = val;
    },
    //监听弹层开启关闭后将值传到父组件
    showModal: function showModal(val) {
      this.$emit('input', val);
    }
  },
  methods: {
    /**
     * @description: 点击按钮，抛出点击事件
     */
    onClickHandle: function onClickHandle(action, type) {
      var _this = this;

      this.$emit(action || 'click', type);

      if (!this.value) {
        return;
      } //关闭前控制函数


      if (this.beforeClose) {
        this.loading[action] = true;
        this.beforeClose(action, function (state) {
          if (state !== false && _this.loading[action]) {
            _this.onClose(action);
          }

          _this.loading.confirm = false;
          _this.loading.cancel = false;
        });
      } else {
        this.onClose(action);
      }
    },
    onClose: function onClose(action) {
      //异步关闭方法
      this.close();

      if (this.callback) {
        this.callback(action);
      }
    },

    /**
     * @description: 点击按钮，抛出事件
     */
    onLeave: function onLeave() {
      this.showModal = false;
      this.$emit('leave');
    },

    /**
     * @description: 生成图标node
     */
    genIcon: function genIcon() {
      var h = this.$createElement;
      var exitField = this.exitField;
      return h("div", {
        "class": bem('icon'),
        "style": {
          height: exitField.iconSize || '48px'
        }
      }, [h(Icon, {
        "attrs": {
          "tag": "span",
          "name": exitField.iconName,
          "color": exitField.iconColor,
          "size": exitField.iconSize || '48'
        }
      })]);
    },

    /**
     * @description: 生成描述node
     */
    genDescription: function genDescription() {
      var h = this.$createElement;
      var exitField = this.exitField;
      var style = this.genDescriptionStyle;
      return h("div", {
        "class": bem('description'),
        "style": style
      }, [exitField.description]);
    },

    /**
     * @description: 生成标题node
     */
    genTitle: function genTitle() {
      var h = this.$createElement;
      var exitField = this.exitField;
      var style = this.genTitleStyle;
      return h("div", {
        "class": bem('title'),
        "style": style
      }, [exitField.title]);
    },

    /**
     * @description: 生成数据信息node
     * @param {String}： exitField.type值
     */
    genInfo: function genInfo(type) {
      var _this2 = this;

      var h = this.$createElement;
      return this.data.length !== 0 && this.data.map(function (item) {
        if (type === 'exit') {
          return h("div", {
            "class": bem('item')
          }, [h("p", {
            "class": bem('item--count')
          }, [item.count]), h("p", {
            "class": bem('item--type')
          }, [item.type])]);
        }

        if (type === 'release') {
          return h("div", {
            "class": bem('release')
          }, [h("p", {
            "class": bem('release--resource')
          }, [item.count]), h("p", {
            "class": bem('release--type')
          }, [item.type ? item.type : '快速上架'])]);
        }

        return _this2.slots('info', item);
      });
    },

    /**
     * @description: 生成按钮node
     */
    genButton: function genButton() {
      var _this3 = this,
          _ref,
          _ref2,
          _ref3,
          _ref4;

      var h = this.$createElement;
      var exitField = this.exitField; //默认取消按钮和确认按钮状态为 true

      var _exitField$showCancel = exitField.showCancelButton,
          showCancelButton = _exitField$showCancel === void 0 ? true : _exitField$showCancel,
          _exitField$showConfir = exitField.showConfirmButton,
          showConfirmButton = _exitField$showConfir === void 0 ? true : _exitField$showConfir;
      var multiple = showCancelButton && showConfirmButton; //判断按钮是否需要垂直排列的，垂直排序默认有 3 个按钮

      var isMore = exitField.buttonDirection === 'column'; //单按钮形式

      if (this.buttonType === 'button') {
        return h(Button, {
          "attrs": {
            "type": "primary",
            "text": exitField.exchangeButtonText,
            "loading": this.exchangeButtonLoading,
            "disabled": this.exchangeButtonDisabled
          },
          "class": bem('button'),
          "on": {
            "click": function click() {
              _this3.onClickHandle();
            }
          }
        });
      } //多按钮形式


      return h("div", {
        "class": isMore ? [bem('footer--multiple')] : [BORDER_TOP, bem('footer')]
      }, [showCancelButton && h(Button, {
        "attrs": {
          "size": "large",
          "text": exitField.cancelButtonText,
          "loading": exitField.cancelButtonLoading
        },
        "class": [bem('cancel'), (_ref = {}, _ref[BORDER_TOP] = isMore, _ref)],
        "style": {
          color: exitField.cancelButtonColor
        },
        "on": {
          "click": function click() {
            _this3.onClickHandle('cancel');
          }
        }
      }), showConfirmButton && (exitField.confirmButtonText || exitField.confirmButtonText2) && h(Button, {
        "attrs": {
          "size": "large",
          "text": exitField.confirmButtonText || exitField.confirmButtonText2,
          "loading": exitField.confirmButtonLoading || exitField.confirmButtonLoading2
        },
        "class": [bem('confirm'), (_ref2 = {}, _ref2[BORDER_LEFT] = multiple, _ref2), (_ref3 = {}, _ref3[BORDER_TOP] = isMore, _ref3)],
        "style": {
          color: exitField.confirmButtonColor || exitField.confirmButtonColor2
        },
        "on": {
          "click": function click() {
            _this3.onClickHandle('confirm', isMore && 2);
          }
        }
      }), showConfirmButton && exitField.confirmButtonText1 && h(Button, {
        "attrs": {
          "size": "large",
          "text": exitField.confirmButtonText1,
          "loading": exitField.confirmButtonLoading1
        },
        "class": [bem('confirm'), (_ref4 = {}, _ref4[BORDER_TOP] = isMore, _ref4)],
        "style": {
          color: exitField.confirmButtonColor1
        },
        "on": {
          "click": function click() {
            _this3.onClickHandle('confirm', isMore && 1);
          }
        }
      })]);
    },

    /**
     * @description: 对不同的内容进行组合
     */
    genTypeContact: function genTypeContact() {
      var h = this.$createElement;
      var exitField = this.exitField;
      return h("div", {
        "style": {
          width: this.width
        },
        "class": this.buttonType === 'button' ? bem('container') : bem('containerConfirm')
      }, [exitField.imgSrc && h("img", {
        "attrs": {
          "src": exitField.imgSrc
        }
      }), exitField.iconName && this.genIcon(), exitField.title && this.genTitle(), exitField.description && this.genDescription(), h("div", {
        "class": bem('info')
      }, [this.genInfo(exitField.type)]), this.genButton(), exitField.endText && h("div", {
        "class": bem('end'),
        "on": {
          "click": this.onLeave
        }
      }, [exitField.endText])]);
    }
  },
  render: function render() {
    var _this4 = this;

    var h = arguments[0];
    return h(Popup, {
      "attrs": {
        "closeable": this.buttonType === 'button',
        "overlay-class": "center-popup-overlay",
        "getContainer": this.getContainer,
        "closeOnClickOverlay": this.closeOnClickOverlay,
        "safeAreaInsetBottom": this.safeAreaInsetBottom
      },
      "class": "sp-center-popup",
      "on": {
        "close": function close() {
          _this4.$emit('close');
        }
      },
      "model": {
        value: _this4.showModal,
        callback: function callback($$v) {
          _this4.showModal = $$v;
        }
      }
    }, [this.genTypeContact()]);
  }
});