"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _constant = require("../utils/constant");

var _icon = _interopRequireDefault(require("../icon"));

// 引入常用工具
// 按钮组件
// 注入生成节点方法
var _createNamespace = (0, _utils.createNamespace)('top-nav-bar'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: {
    //是否有padding
    padding: Boolean,
    // 标题
    title: String,
    //自定义标题颜色
    titleColor: String,
    // 是否弹性布局
    fixed: Boolean,
    // 层级
    zIndex: [Number, String],
    background: String,
    // 左侧文字
    leftText: String,
    // 右侧文字
    rightText: String,
    // 返回按钮
    leftArrow: Boolean,
    // 是否保留占位
    placeholder: Boolean,
    //是否是特殊布局
    specialLayout: {
      type: Boolean,
      default: false
    },
    ellipsis: {
      type: Boolean,
      default: false
    },
    // 是否有下border
    border: {
      type: Boolean,
      default: true
    },
    width: [Number, String]
  },
  data: function data() {
    return {
      height: null,
      widthCalc: null
    };
  },
  mounted: function mounted() {
    //计算title的宽度
    if (!this.specialLayout) {
      var leftwidth = this.$refs.left ? this.$refs.left.offsetWidth : 0;
      var righttwidth = this.$refs.right ? this.$refs.right.offsetWidth : 0;
      var a;
      a = leftwidth > righttwidth ? Number(leftwidth) * 2 : Number(righttwidth) * 2;
      this.widthCalc = 'calc(100% - ' + a + 'px' + ')';
    }

    if (this.placeholder && this.fixed) {
      this.height = this.$refs.navBar.getBoundingClientRect().height;
    }
  },
  computed: {},
  methods: {
    /**
     *左侧文字或者返回按钮或者插槽
     *
     * @return {*}
     */
    genLeft: function genLeft() {
      var h = this.$createElement;
      var leftSlot = this.slots('left');

      if (leftSlot) {
        return h("div", {
          "ref": "left",
          "class": this.specialLayout ? bem('special--left') : bem('left'),
          "on": {
            "click": this.onClickLeft
          }
        }, [leftSlot]);
      }

      if (this.leftText || this.leftArrow) {
        return h("div", {
          "ref": "left",
          "class": this.specialLayout ? bem('special--left') : bem('left'),
          "on": {
            "click": this.onClickLeft
          }
        }, [[this.leftArrow && h(_icon.default, {
          "class": bem('arrow'),
          "attrs": {
            "class-prefix": "sp-iconfont",
            "name": "back"
          }
        }), this.leftText && h("span", {
          "class": bem('text')
        }, [this.leftText])]]);
      }
    },

    /**
     * 标题插槽
     *
     * @param {*} acas
     * @return {*}
     */
    genTitle: function genTitle(acas) {
      var h = this.$createElement;
      var titleSlot = this.slots('title');

      if (titleSlot || this.title) {
        return h("div", {
          "style": ({
            width: this.width || this.widthCalc
          }, this.titleColor && {
            color: this.titleColor
          }),
          "class": [this.specialLayout ? bem('special--title') : bem('title'), this.ellipsis && bem('ellipsis')]
        }, [this.slots('title') || this.title]);
      }
    },

    /**
     *生成右侧的文字或插槽
     *
     * @return {*}
     */
    genRight: function genRight() {
      var h = this.$createElement;
      var rightSlot = this.slots('right');

      if (rightSlot) {
        return h("div", {
          "ref": "right",
          "class": this.specialLayout ? bem('special--right') : bem('right'),
          "on": {
            "click": this.onClickRight
          }
        }, [rightSlot]);
      }

      if (this.rightText) {
        return h("div", {
          "ref": "right",
          "class": this.specialLayout ? bem('special--right') : bem('right'),
          "on": {
            "click": this.onClickRight
          }
        }, [h("span", {
          "class": bem('text')
        }, [this.rightText])]);
      }
    },

    /**
     *生成导航节点
     *
     * @return {*}
     */
    genNavBar: function genNavBar() {
      var _ref;

      var h = this.$createElement;
      return h("div", {
        "ref": "navBar",
        "style": ({
          zIndex: this.zIndex
        }, this.background && {
          background: this.background
        }),
        "class": [bem({
          fixed: this.fixed
        }), (_ref = {}, _ref[_constant.BORDER_BOTTOM] = this.border, _ref), bem({
          padding: this.padding
        })]
      }, [this.genLeft(), this.genTitle(), this.genRight()]);
    },

    /**
     *抛出左侧点击事件
     *
     * @param {*} event
     */
    onClickLeft: function onClickLeft(event) {
      this.$emit('on-click-left', event);
    },

    /**
     *抛出右侧点击事件
     *
     * @param {*} event
     */
    onClickRight: function onClickRight(event) {
      this.$emit('on-click-right', event);
    }
  },

  /**
   *渲染方法
   *
   * @return {*}
   */
  render: function render() {
    var h = arguments[0];

    if (this.placeholder && this.fixed) {
      return h("div", {
        "class": bem('placeholder'),
        "style": {
          height: this.height + "px"
        }
      }, [this.genNavBar()]);
    }

    return this.genNavBar();
  }
});

exports.default = _default;