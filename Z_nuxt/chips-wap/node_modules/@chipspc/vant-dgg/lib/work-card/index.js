"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _image = _interopRequireDefault(require("../image"));

var _tag = _interopRequireDefault(require("../tag"));

var _icon = _interopRequireDefault(require("../icon"));

var _createNamespace = (0, _utils.createNamespace)('work-card'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default2 = createComponent({
  props: {
    //不同布局开关
    layout: {
      type: Boolean,
      default: false
    },
    //标题
    title: String,
    //标签
    tag: String,
    //图片
    images: {
      type: Object,
      default: function _default() {
        width: [Number, String];

        src: String;

        height: [Number, String];

        fit: 'contain';
      }
    },
    //浏览量
    value: {
      type: [Number, String],
      default: 0
    },
    valueText: {
      type: String,
      default: '浏览'
    },
    default: 0,
    //点赞
    favour: {
      type: Object,
      default: function _default() {
        value: [Number, String];

        icon: String;

        isFavour: false; //点赞类名


        activeClass: String;
      }
    },
    iconPrefix: String
  },
  data: function data() {
    return {
      height: null
    };
  },
  computed: {
    /**
     *数字用逗号隔开
     *
     * @param {number} [cut=0]
     * @return {*}
     */
    numberFilter: function numberFilter(cut) {
      if (cut === void 0) {
        cut = 0;
      }

      //cut 为需要保留的小数位数  -1为清空小数 0为保留全部位数的小数 传入多少即为多少 不传默认保留两位小数 传进来多少就截取多少
      //数据校验
      if (parseFloat(this.value).toString() == 'NaN') return '0.00'; // 将数值截取

      var num = this.value.toString().split('.');
      var zs = num[0];
      var xs = num[1]; // 整数部分处理，增加,

      var intPartFormat = zs.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');

      if (xs != null) {
        if (cut == 0) {
          return intPartFormat + '.' + xs;
        } else if (cut == -1) {
          return intPartFormat;
        } else {
          return intPartFormat + '.' + xs.substr(0, cut);
        }
      } else {
        return intPartFormat;
      }
    }
  },
  watch: {},
  mounted: function mounted() {},
  methods: {
    /**
     *点赞
     *
     * @param {*} event
     */
    onFavour: function onFavour(event) {
      this.$emit('on-favour', event);
    },

    /**
     *左边结构插槽
     *
     * @return {*}
     */
    genLeft: function genLeft() {
      var h = this.$createElement;
      var layout = this.layout;

      if (!layout) {
        var _ref;

        return h("div", {
          "class": bem('left')
        }, [this.genTitle(), this.genImg(), h("div", {
          "class": bem('bottom')
        }, [this.value && h("div", {
          "class": bem('bottom--value')
        }, [this.numberFilter, this.valueText]), this.favour && h("div", {
          "class": [bem('bottom--favour'), (_ref = {}, _ref[this.favour.activeClass] = this.favour.isFavour, _ref)],
          "on": {
            "click": this.onFavour
          }
        }, [h(_icon.default, {
          "attrs": {
            "classPrefix": this.iconPrefix,
            "name": this.favour.icon || 'good-job-o',
            "size": "14"
          }
        }), h("span", [this.favour.value || 0])])])]);
      } else {
        var _ref2;

        return h("div", {
          "class": bem('left')
        }, [this.genTitle(), h("div", {
          "class": bem('bottom')
        }, [this.value && h("div", {
          "class": bem('bottom--value')
        }, [this.numberFilter, this.valueText]), this.favour && h("div", {
          "class": [bem('bottom--favour'), (_ref2 = {}, _ref2[this.favour.activeClass] = this.favour.isFavour, _ref2)],
          "on": {
            "click": this.onFavour
          }
        }, [h(_icon.default, {
          "attrs": {
            "classPrefix": this.iconPrefix,
            "name": this.favour.icon || 'good-job-o',
            "size": "14"
          }
        }), h("span", [this.favour.value])])])]);
      }
    },

    /**
     *右边布局插槽
     *
     * @return {*}
     */
    genRight: function genRight() {
      var h = this.$createElement;
      var layout = this.layout;

      if (layout) {
        return h("div", {
          "class": bem('right')
        }, [this.genImg()]);
      }
    },
    onClickTitle: function onClickTitle() {
      this.$emit('on-click-title');
    },

    /**
     *生成title
     *
     */
    genTitle: function genTitle() {
      var h = this.$createElement;
      var title = this.slots('title');

      if (title) {
        return h("div", {
          "class": bem('title'),
          "on": {
            "click": this.onClickTitle
          }
        }, [this.slots('title')]);
      }

      if (this.title) {
        return h("div", {
          "class": bem('title'),
          "on": {
            "click": this.onClickTitle
          }
        }, [this.tag && h("div", {
          "ref": "titleTag",
          "class": bem('title--tag')
        }, [h(_tag.default, {
          "attrs": {
            "type": "primary"
          }
        }, [this.tag])]), h("div", [this.title])]);
      }
    },

    /**
     *图片插槽
     *
     * @return {*}
     */
    genImg: function genImg() {
      var h = this.$createElement;
      var img = this.slots('img');
      var images = this.images;

      if (img) {
        return h("div", {
          "class": bem('img')
        }, [this.slots('img')]);
      }

      if (images) {
        return h("div", {
          "class": bem('img')
        }, [h(_image.default, {
          "attrs": {
            "src": images.src,
            "width": images.width || (this.layout ? 135 : '100%'),
            "height": images.height || (this.layout ? 90 : 190),
            "fit": images.fit,
            "alt": images.alt,
            "radius": images.radius,
            "round": images.round,
            "lazy-load": images.lazyLoad,
            "show-error": images.showError,
            "show-loading": images.showLoading,
            "error-icon": images.errorIcon
          }
        })]);
      }
    },

    /**
     *底部信息
     *
     * @return {*}
     */
    genBottom: function genBottom() {
      var h = this.$createElement;
      var img = this.slots('img');

      if (img) {
        return this.slots('img');
      }

      if (this.images) {
        return h("div", {
          "class": bem('img')
        }, [h(_image.default, {
          "attrs": {
            "src": this.images
          }
        })]);
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("div", {
      "class": bem('warp')
    }, [this.genLeft(), this.genRight()]);
  }
});

exports.default = _default2;