"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _popup = require("../mixins/popup");

var _icon = _interopRequireDefault(require("../icon"));

var _createNamespace = (0, _utils.createNamespace)('popup'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  mixins: [(0, _popup.PopupMixin)()],
  props: {
    // 是否是圆角
    round: Boolean,
    // 标题
    title: String,
    //内容
    content: String,
    //持续时间
    duration: [Number, String],
    //是否可关闭
    closeable: Boolean,
    //动画方式
    transition: String,
    //是否开启安全区域适配
    safeAreaInsetBottom: Boolean,
    //关闭按钮
    closeIcon: {
      type: String,
      default: 'close'
    },
    //关闭按钮位置
    closeIconPosition: {
      type: String,
      default: 'top-right'
    },
    //标题类型
    titleType: {
      type: String,
      default: 'left'
    },
    //弹出方向
    position: {
      type: String,
      default: 'center'
    },
    overlay: {
      type: Boolean,
      default: true
    },
    closeOnClickOverlay: {
      type: Boolean,
      default: true
    },
    //图标类型
    classPrefix: {
      type: String,
      default: 'sp-iconfont'
    },
    padding: {
      type: Boolean,
      default: false
    }
  },
  methods: {
    genCancelEvent: function genCancelEvent() {
      this.$emit('on-cancel');
      this.close();
    },
    genSubmitEvent: function genSubmitEvent() {
      this.$emit('on-submit');
      this.close();
    },

    /**
     *标题取消按钮
     *
     * @return {*}
     */
    genCancel: function genCancel() {
      var h = this.$createElement;
      return h("div", {
        "on": {
          "click": this.genCancelEvent
        },
        "class": bem('title--center--cancel')
      }, ["\u53D6\u6D88"]);
    },
    genSubmit: function genSubmit() {
      var h = this.$createElement;
      return h("div", {
        "on": {
          "click": this.genSubmitEvent
        },
        "class": bem('title--center--submit')
      }, ["\u786E\u8BA4"]);
    },

    /**
     *内容
     *
     * @return {*}
     */
    genCont: function genCont() {
      var h = this.$createElement;
      var contSlot = this.slots('content');

      if (contSlot || this.content) {
        return h("div", {
          "class": bem('cont')
        }, [this.slots('content') || this.content]);
      }
    },

    /**
     *生成标题
     *
     * @return {*}
     */
    genTitle: function genTitle() {
      var h = this.$createElement;
      var titleSlot = this.slots('title');

      if (titleSlot || this.title) {
        if (this.titleType === 'left') {
          return h("div", {
            "class": bem('title', this.titleType)
          }, [h("div", [this.slots('title') || this.title]), this.genCont()]);
        } else {
          return h("div", {
            "class": bem('title', this.titleType)
          }, [this.genCancel(), h("div", {
            "class": bem('title--center--title')
          }, [this.slots('title') || this.title]), this.genSubmit()]);
        }
      }
    }
  },
  beforeCreate: function beforeCreate() {
    var _this = this;

    var createEmitter = function createEmitter(eventName) {
      return function (event) {
        return _this.$emit(eventName, event);
      };
    };

    this.onClick = createEmitter('click');
    this.onOpened = createEmitter('opened');
    this.onClosed = createEmitter('closed');
  },
  render: function render() {
    var _bem;

    var h = arguments[0];

    if (!this.shouldRender) {
      return;
    }

    var round = this.round,
        position = this.position,
        duration = this.duration;
    var isCenter = position === 'center';
    var transitionName = this.transition || (isCenter ? 'sp-fade' : "sp-popup-slide-" + position);
    var style = {};

    if ((0, _utils.isDef)(duration)) {
      var key = isCenter ? 'animationDuration' : 'transitionDuration';
      style[key] = duration + "s";
    }

    return h("transition", {
      "attrs": {
        "name": transitionName
      },
      "on": {
        "afterEnter": this.onOpened,
        "afterLeave": this.onClosed
      }
    }, [h("div", {
      "directives": [{
        name: "show",
        value: this.value
      }],
      "style": style,
      "class": bem((_bem = {
        round: round
      }, _bem[position] = position, _bem['safe-area-inset-bottom'] = this.safeAreaInsetBottom, _bem.padding = this.padding, _bem)),
      "on": {
        "click": this.onClick
      }
    }, [this.genTitle(), this.slots(), this.closeable && this.titleType !== 'center' && h(_icon.default, {
      "attrs": {
        "role": "button",
        "tabindex": "0",
        "class-prefix": this.classPrefix,
        "name": this.closeIcon
      },
      "class": bem('close-icon', this.closeIconPosition),
      "on": {
        "click": this.close
      }
    })])]);
  }
});

exports.default = _default;