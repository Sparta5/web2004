"use strict";

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _relation = require("../mixins/relation");

// 创建命名空间
var _createNamespace = (0, _utils.createNamespace)('work-tab-sort'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1]; // 创建组件


var _default = createComponent({
  // 声明本组件是父节点和组件名称
  mixins: [(0, _relation.ParentMixin)('SpWorkTabSort')],
  props: {
    value: {
      // 获取默认选中值
      type: Object,
      default: {
        index: 0,
        sort: -1 // 倒序

      }
    }
  },
  data: function data() {
    return {
      itemIndex: Number(this.value.index),
      sort: this.value.sort
    };
  },
  computed: {},
  watch: {
    // 监听到每次选中项的改变
    itemIndex: function itemIndex(_itemIndex) {
      // 设置选中项
      this.setActiveItem(_itemIndex);
    }
  },
  mounted: function mounted() {
    // 组件初始化时默认设置选中项
    this.setActiveItem(this.itemIndex); // this.children.forEach((item) => {
    //   item.sort=this.sort;
    // });
  },
  methods: {
    // 设置菜单选中的方法
    setActiveItem: function setActiveItem(itemIndex) {
      var _this = this;

      this.children.forEach(function (item, index) {
        item.sort = _this.sort;
        item.active = (item.name || index) === itemIndex;
      });
    },
    // 每次点击子组件时的监听事件，供子组件调用
    onChange: function onChange(active, index, sort) {
      if (active !== this.itemIndex) {
        // 将点击后的值,返回给父组件调用时的回调（暴露给用户的方法）
        this.$emit('change', active, index, sort);
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    // 返回组件
    return h("div", {
      "class": bem()
    }, [this.slots()]);
  }
});

exports.default = _default;