"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _utils = require("../utils");

var _image = _interopRequireDefault(require("../image"));

var _tag = _interopRequireDefault(require("../tag"));

var _createNamespace = (0, _utils.createNamespace)('work-list'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default2 = createComponent({
  props: {
    //是否是有边框布局
    border: {
      type: Boolean,
      default: false
    },
    //图片左上角标签
    tag: String,
    //标题
    title: String,
    //标题标签
    titleTag: {
      type: Object,
      default: function _default() {
        text: String;

        color: String;

        textColor: String;
      }
    },
    //图片参数
    images: {
      type: Object,
      default: function _default() {
        src: String;

        width: [Number, String];

        height: [Number, String];

        fit: String;

        alt: String;

        radius: [Number, String];

        round: Boolean;

        errorIcon: String;
      }
    },
    //二级标签组
    tagList: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    //描述信息组
    labelList: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    //金额系列
    money: {
      type: Object,
      default: function _default() {
        value: Number;

        unit: String;

        fontSize: [Number, String];
      }
    },
    //销量
    sales: {
      type: Object,
      default: function _default() {
        value: Number;

        text: String;

        layout: Boolean;
      }
    },
    //三级标签（推荐信息）
    options: {
      type: Object,
      default: function _default() {
        list: [];

        type: 'one';
      }
    }
  },
  data: function data() {
    return {};
  },
  computed: {
    valueFomat: function valueFomat() {
      var y = String(this.money.value).indexOf('.') + 1; //获取小数点的位置

      if (y > 0) {
        return '.' + this.money.value.toString().replace(/\d+\.(\d*)/, '$1');
      }
    },
    valueFomat1: function valueFomat1() {
      var y = String(this.money.value).indexOf('.') + 1; //获取小数点的位置

      if (y > 0) {
        return parseInt(this.money.value);
      } else {
        return this.money.value;
      }
    }
  },
  watch: {},
  mounted: function mounted() {},
  methods: {
    /**
     *数字用逗号隔开
     *
     * @param {*} val
     * @param {number} [cut=0]
     * @return {*}
     */
    numberFilter: function numberFilter(val, cut) {
      if (cut === void 0) {
        cut = 0;
      }

      //cut 为需要保留的小数位数  -1为清空小数 0为保留全部位数的小数 传入多少即为多少 不传默认保留两位小数 传进来多少就截取多少
      //数据校验
      if (parseFloat(val).toString() == 'NaN') return '0.00'; // 将数值截取

      var num = val.toString().split('.');
      var zs = num[0];
      var xs = num[1]; // 整数部分处理，增加,

      var intPartFormat = zs.toString().replace(/(\d)(?=(?:\d{3})+$)/g, '$1,');

      if (xs != null) {
        if (cut == 0) {
          return intPartFormat + '.' + xs;
        } else if (cut == -1) {
          return intPartFormat;
        } else {
          return intPartFormat + '.' + xs.substr(0, cut);
        }
      } else {
        return intPartFormat;
      }
    },

    /**
     *左边结构插槽
     *
     * @return {*}
     */
    genLeft: function genLeft() {
      var h = this.$createElement;
      var img = this.slots('img');
      var images = this.images;

      if (img) {
        return h("div", {
          "class": bem('left')
        }, [this.slots('img')]);
      }

      if (images && images.src) {
        return h("div", {
          "class": bem('left')
        }, [h(_image.default, {
          "attrs": {
            "src": images.src,
            "width": images.width,
            "height": images.height,
            "fit": images.fit,
            "alt": images.alt,
            "radius": images.radius,
            "round": images.round,
            "lazy-load": images.lazyLoad,
            "show-error": images.showError,
            "show-loading": images.showLoading,
            "error-icon": images.errorIcon
          }
        }), this.tag && h("div", {
          "class": bem('tag')
        }, [this.tag])]);
      }
    },

    /**
     *  右边布局插槽
     *
     * @return {*}
     */
    genRight: function genRight() {
      var h = this.$createElement;
      return h("div", {
        "class": bem('right'),
        "style": this.border && {
          maxWidth: 'calc(100% - ' + (this.images.width + "px") + ' - 16px)'
        }
      }, [this.genTitle(), this.genTag(), this.genLabel(), this.genMoney(), this.options.list.length > 0 && h("div", {
        "class": bem('list--tag')
      }, [this.genListTag()])]);
    },

    /**
     *抛出点击事件
     *
     */
    onClick: function onClick() {
      this.$emit('on-click');
    },

    /**
     *生成title 和title插槽
     *
     * @return {*}
     */
    genTitle: function genTitle() {
      var h = this.$createElement;
      var title = this.slots('title');

      if (this.title || title) {
        return h("div", {
          "class": bem('title'),
          "on": {
            "click": this.onClick
          }
        }, [h("div", {
          "class": [bem('title--text'), this.border && bem('ellipsis')]
        }, [this.titleTag && this.titleTag.text && h("div", {
          "class": bem('title--tag')
        }, [h(_tag.default, {
          "attrs": {
            "color": this.titleTag.color,
            "text-color": this.titleTag.textColor
          }
        }, [this.titleTag.text])]), title ? this.slots('title') : this.title])]);
      }
    },

    /**
     * 描述信息方法
     *
     * @return {*}
     */
    genLabel: function genLabel() {
      var h = this.$createElement;
      var List = this.labelList.map(function (item) {
        return h("li", [item]);
      });

      if (this.labelList.length > 0) {
        return h("ul", {
          "class": bem('label-list')
        }, [List]);
      }
    },

    /**
     *生成销量组件方法
     *
     * @return {*}
     */
    genSales: function genSales() {
      var h = this.$createElement;

      if (this.sales) {
        if (this.sales.layout) {
          return h("div", {
            "class": bem('money--right')
          }, [h("span", [this.sales.text]), h("span", [this.sales.value || 0])]);
        } else {
          return h("div", {
            "class": bem('money--right')
          }, [h("span", [this.numberFilter(this.sales.value, 0) || 0]), h("span", [this.sales.text])]);
        }
      }
    },

    /**
     *金额和销量组件合并
     *
     * @return {*}
     */
    genMoney: function genMoney() {
      var h = this.$createElement;

      if (this.money) {
        var money = h("div", {
          "class": bem('money--left')
        }, [h("span", {
          "style": {
            fontSize: this.money.fontSize + "px"
          }
        }, [h("span", [this.valueFomat1 || 0]), h("span", [this.valueFomat])]), h("span", [this.money.unit || '元'])]);
        return h("div", {
          "class": bem('money'),
          "style": this.border && {
            justifyContent: 'space-between'
          }
        }, [money, this.genSales()]);
      }
    },

    /**
     *生成二级标签
     *
     * @return {*}
     */
    genTag: function genTag() {
      var h = this.$createElement;
      var List = this.tagList.map(function (option) {
        return h(_tag.default, {
          "attrs": {
            "color": option.color,
            "text-color": option.textColor
          }
        }, [option.text]);
      });

      if (this.tagList.length > 0) {
        return h("div", {
          "class": bem('tag-list')
        }, [List]);
      }
    },

    /**
     * 生成推荐信息 和 判断推荐信息类型
     *
     * @return {*}
     */
    genListTag: function genListTag() {
      var h = this.$createElement;
      var List = this.options.list.map(function (option) {
        return h("li", [h("div", [option.title]), h("div", {
          "class": bem('ellipsis')
        }, [option.text])]);
      });

      if (this.options.type === 'one') {
        return h("ul", {
          "class": bem('list--tag--one')
        }, [List]);
      } else if (this.options.type === 'two') {
        return h("ul", {
          "class": bem('list--tag--two')
        }, [List]);
      } else if (this.options.type === 'three') {
        return h("ul", {
          "class": bem('list--tag--three')
        }, [List]);
      } else {
        var _List = this.options.list.map(function (option) {
          return h("div", [h(_image.default, {
            "attrs": {
              "src": option.title,
              "width": "15",
              "height": "15"
            }
          }), h("div", {
            "class": bem('ellipsis'),
            "style": {
              color: option.color
            }
          }, [option.text])]);
        });

        return h("div", {
          "class": bem('list--tag--four')
        }, [_List]);
      }
    }
  },
  render: function render() {
    var h = arguments[0];
    return h("div", {
      "class": [bem({
        border: this.border
      })]
    }, [this.genLeft(), this.genRight()]);
  }
});

exports.default = _default2;