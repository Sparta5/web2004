"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _utils = require("../utils");

var _mobile = require("../utils/validate/mobile");

var _field = _interopRequireDefault(require("../field"));

var _button = _interopRequireDefault(require("../button"));

var _checkbox = _interopRequireDefault(require("../checkbox"));

var _createComponent;

var _createNamespace = (0, _utils.createNamespace)('depreciate'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1],
    t = _createNamespace[2];

var defaultData = {
  code: '',
  tel: '',
  isDefault: false,
  show: true
};

function isPostal(value) {
  return /^\d{6}$/.test(value);
}

var _default2 = createComponent((_createComponent = {
  props: {
    //电话号码占位符
    placeholderTel: String,
    //验证码占位符
    placeholderCode: String,
    //是否能保存
    isSaving: Boolean,
    //是否禁用按钮
    disabled: Boolean,
    //验证函数
    validator: Function,
    //电话号码最大长度
    telMaxlength: [Number, String],
    //按钮文字
    saveButtonText: String,
    //获取验证码对象
    messageInfo: {
      type: Object,
      default: function _default() {
        return (0, _extends2.default)({}, defaultData);
      }
    },
    //获取验证码的文本
    buttonText: String,
    //验证电话
    telValidator: {
      type: Function,
      default: _mobile.isMobile
    },
    //选择文案
    chooseInfo: {
      type: Object,
      default: function _default() {}
    }
  },
  data: function data() {
    return {
      data: {},
      detailFocused: false,
      errorInfo: {
        tel: '',
        code: ''
      },
      time: null,
      count: ''
    };
  },
  computed: {},
  watch: {
    messageInfo: {
      handler: function handler(val) {
        this.data = (0, _extends2.default)({}, defaultData, val);
      },
      deep: true,
      immediate: true
    }
  }
}, _createComponent["computed"] = {
  //电话号码隐藏
  phoneFormart: function phoneFormart() {
    return JSON.stringify(this.data.tel).replace(/(\d{3})\d{4}(\d{4})/, '$1****$2');
  }
}, _createComponent.methods = {
  /**
   *获取焦点事件
   *
   * @param {*} key
   */
  onFocus: function onFocus(key) {
    this.errorInfo[key] = '';
    this.$emit('focus', key);
  },

  /**
   *保存
   *
   */
  onSave: function onSave() {
    var _this = this;

    var items = ['code', 'tel'];
    var isValid = items.every(function (item) {
      var msg = _this.getErrorMessage(item);

      if (msg) {
        _this.errorInfo[item] = msg;
      }

      return !msg;
    });

    if (isValid && !this.isSaving) {
      this.$emit('save', this.data);
    }
  },

  /**
   *生成错误信息
   *
   * @param {*} key
   * @return {*}
   */
  getErrorMessage: function getErrorMessage(key) {
    var value = String(this.data[key] || '').trim();

    if (this.validator) {
      var message = this.validator(key, value);

      if (message) {
        return message;
      }
    }

    switch (key) {
      case 'code':
        return value ? '' : t('nameEmpty');

      case 'tel':
        return this.telValidator(value) ? '' : t('telInvalid');
    }
  },
  genFinish: function genFinish() {
    var h = this.$createElement;
    return h("div", {
      "on": {
        "click": this.sendCode
      },
      "class": bem('code')
    }, [h("span", {
      "directives": [{
        name: "show",
        value: this.messageInfo.show
      }]
    }, [this.buttonText]), h("span", {
      "directives": [{
        name: "show",
        value: !this.messageInfo.show
      }],
      "class": bem('code--count')
    }, [this.count, " s"])]);
  },
  sendCode: function sendCode() {
    // const TIME_COUNT = 60;
    // if (!this.timer) {
    //   this.count = TIME_COUNT;
    //   this.messageInfo.show = false;
    //   this.timer = setInterval(() => {
    //     if (this.count > 0 && this.count <= TIME_COUNT) {
    //       this.count--;
    //     } else {
    //       this.messageInfo.show = true;
    //       clearInterval(this.timer); // 清除定时器
    //       this.timer = null;
    //     }
    //   }, 1000);
    // }
    this.$emit('get-code');
  },

  /**
   * 判断是否有电话
   */
  telJudge: function telJudge() {
    var _this2 = this;

    var h = this.$createElement;
    var data = this.data,
        errorInfo = this.errorInfo;

    var onFocus = function onFocus(name) {
      return function () {
        return _this2.onFocus(name);
      };
    };

    if (this.messageInfo.tel) {
      return h("div", [this.phoneFormart]);
    } else {
      return h("div", {
        "class": bem('fields')
      }, [h(_field.default, {
        "attrs": {
          "clearable": true,
          "type": "tel",
          "maxlength": this.telMaxlength,
          "placeholder": this.placeholderTel,
          "errorMessage": errorInfo.tel
        },
        "on": {
          "focus": onFocus('tel')
        },
        "scopedSlots": {
          extra: this.genFinish
        },
        "model": {
          value: data.tel,
          callback: function callback($$v) {
            _this2.$set(data, "tel", $$v);
          }
        }
      }), h(_field.default, {
        "attrs": {
          "clearable": true,
          "type": "text",
          "placeholder": this.placeholderCode,
          "errorMessage": errorInfo.code
        },
        "on": {
          "focus": onFocus('code')
        },
        "model": {
          value: data.code,
          callback: function callback($$v) {
            _this2.$set(data, "code", $$v);
          }
        }
      }), h("span")]);
    }
  }
}, _createComponent.render = function render(h) {
  var _this3 = this;

  var data = this.data,
      errorInfo = this.errorInfo;
  return h("div", {
    "class": bem()
  }, [this.telJudge(), h("div", {
    "class": bem('choose')
  }, [h("div", [h(_checkbox.default, {
    "class": bem('choose--radio'),
    "attrs": {
      "icon-size": "16px"
    },
    "model": {
      value: data.isDefault,
      callback: function callback($$v) {
        _this3.$set(data, "isDefault", $$v);
      }
    }
  }, [h("div", [this.chooseInfo.title])])]), h("div", {
    "class": bem('choose--text')
  }, [h("div", [this.chooseInfo.text])])]), h("div", {
    "class": bem('buttons')
  }, [h(_button.default, {
    "attrs": {
      "block": true,
      "disabled": this.disabled,
      "loading": this.isSaving,
      "type": "primary",
      "text": this.saveButtonText || '确定'
    },
    "on": {
      "click": this.onSave
    }
  })])]);
}, _createComponent));

exports.default = _default2;