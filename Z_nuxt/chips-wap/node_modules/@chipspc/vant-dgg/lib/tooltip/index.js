"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _utils = require("../utils");

var _event = require("../utils/dom/event");

var _icon = _interopRequireDefault(require("../icon"));

var _router = require("../utils/router");

var _createNamespace = (0, _utils.createNamespace)('tooltip'),
    createComponent = _createNamespace[0],
    bem = _createNamespace[1];

var _default = createComponent({
  props: (0, _extends2.default)({}, _router.routeProps, {
    //路由跳转属性 url to replace
    popperClass: String,
    //弹层class
    width: String,
    //弹层宽度
    placement: {
      type: String,
      default: 'bottom'
    },
    position: {
      type: String,
      default: 'center'
    },
    visibleArrow: {
      type: Boolean,
      default: true
    },
    //是否显示箭头
    menuList: Array //菜单列表数据

  }),
  data: function data() {
    return {
      showPopper: false,
      //弹层控制
      referenceElm: {} //插槽

    };
  },
  computed: {
    //插槽 dom
    getElm: function getElm() {
      return this.referenceElm[0].elm;
    }
  },
  beforeCreate: function beforeCreate() {
    var _this = this;

    var createEmitter = function createEmitter(eventName) {
      return function (event) {
        return _this.$emit(eventName, event);
      };
    };

    this.onOpened = createEmitter('opened');
    this.onClosed = createEmitter('closed');
  },
  watch: {
    showPopper: function showPopper(val) {
      val ? this.$emit('show') : this.$emit('hide');
    }
  },
  mounted: function mounted() {},
  methods: {
    onClick: function onClick(event, item) {
      //配置禁用后阻止默认事件
      if (item.disable) {
        return event.stopPropagation();
      } //抛出点击事件


      this.$emit('click', item);
      if (this.showPopper) this.showPopper = false; //路由跳转

      (0, _router.route)(this.$router, this);
    },
    //匹配传入的 placement 属性
    setPlacement: function setPlacement() {
      var placementMap = {
        top: 'top',
        bottom: 'bottom',
        left: 'left',
        right: 'right'
      };
      return placementMap[this.placement];
    },

    /**
     * @description 生成默认菜单列表
     * @returns {Element} 菜单列表 dom
     */
    genContent: function genContent() {
      var _this2 = this;

      var h = this.$createElement;
      var menuList = this.menuList;
      return h("div", {
        "class": bem('list')
      }, [menuList && menuList.map(function (item) {
        return h("div", {
          "class": [bem('item'), item.disable ? 'disable' : ''],
          "on": {
            "click": function click(event) {
              _this2.onClick(event, item);
            }
          }
        }, [h(_icon.default, {
          "style": {
            backgroundColor: item.icon ? '' : '#eee'
          },
          "class": bem('item--icon'),
          "attrs": {
            "tag": "div",
            "name": item.icon,
            "size": item.iconSize || '20px'
          }
        }), h("div", {
          "class": bem('item--content')
        }, [item.content])]);
      })]);
    },

    /**
     * @description 生成蒙层 dom
     * @returns {element}
     */
    genOverlay: function genOverlay() {
      var _this3 = this;

      var h = this.$createElement;
      return h("div", {
        "ref": "overlay",
        "class": bem('overlay'),
        "on": {
          "click": function click(e) {
            if (_this3.showPopper) _this3.showPopper = false;
          }
        }
      });
    },

    /**
     * @description 生成用户传入的自定义 "reference" 插槽
     * @returns {Slot} 自定义插槽
     */
    genSlots: function genSlots() {
      var _this4 = this;

      //自定义插槽
      var slot = this.referenceElm = this.slots('reference'); //等待自定义插槽在页面渲染完成后进行计算和监听事件

      this.$nextTick(function () {
        var height = _this4.getElm.getBoundingClientRect().height;

        var popover = _this4.$refs.popover;
        var overlay = _this4.$refs.overlay;
        popover.style.top = height + 6 + 'px';
        overlay.style.top = height + 'px';
        popover.style.right = 12 + 'px';
        var width = popover.getBoundingClientRect().width;
        _this4.$refs.arrow.style.left = width - 20 + 'px'; //监听插槽点击事件，

        (0, _event.on)(_this4.getElm, 'click', _this4.openPopover);
        (0, _event.on)(document, 'click', _this4.hidePopover);
      });
      return slot;
    },

    /**
     * @description 插槽点击事件，打开弹层
     */
    openPopover: function openPopover() {
      this.showPopper = !this.showPopper;
    },

    /**
     * @description 文档点击事件，用于关闭弹层
     */
    hidePopover: function hidePopover(e) {
      //判断当前点击对象是否在插槽内，或者是当前元素内，阻止弹层关闭
      if (this.getElm.contains(e.target) || this.$el.contains(e.target)) {
        return;
      }

      this.showPopper = false;
    }
  },

  /**
   * @description 取消监听事件
   */
  beforeDestroy: function beforeDestroy() {
    (0, _event.off)(this.getElm, 'click', this.openPopover);
    (0, _event.off)(document, 'click', this.hidePopover);
  },
  render: function render() {
    var h = arguments[0];
    var popperClass = this.popperClass;
    return h("div", {
      "class": bem()
    }, [h("transition", {
      "attrs": {
        "name": "sp-fade"
      },
      "on": {
        "afterEnter": this.onOpened,
        "afterLeave": this.onClosed
      }
    }, [h("div", {
      "directives": [{
        name: "show",
        value: this.showPopper
      }]
    }, [this.genOverlay(), h("div", {
      "ref": "popover",
      "class": [popperClass, bem('show')],
      "style": {
        width: this.width,
        position: 'absolute'
      },
      "attrs": {
        "x-placement": this.setPlacement()
      }
    }, [this.genContent(), this.visibleArrow && h("div", {
      "ref": "arrow",
      "attrs": {
        "x-arrow": true
      },
      "class": "popper__arrow"
    })])])]), this.genSlots()]);
  }
});

exports.default = _default;